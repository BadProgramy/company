<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Department">
    <resultMap id="result" type="Department">
        <result property="id" column="id"/>
        <result property="idParentDepartment" column="idParentDepartment"/>
        <result property="name" column="name"/>
        <result property="dateCreation" column="dateCreation"/>
    </resultMap>

    <!-- , string_to_array(#{idEmployees},',', '*')::int[] -->
    <insert id="insert" parameterType="Department" keyProperty="id">
        INSERT INTO department (id,idparentdepartment,name,datecreation)
         VALUES (nextval('nextiddepartment'),#{idParentDepartment},#{name},#{dateCreation});
    </insert>

    <insert id="insertHead" parameterType="Department" keyProperty="id">
        INSERT INTO department (id,idparentdepartment,name,datecreation)
         VALUES (nextval('nextiddepartment'),NULL,#{name},#{dateCreation});
    </insert>

    <select id="selectAll" resultMap="result">
        SELECT * FROM department;
    </select>
    
    <update id="updateName" parameterType="Department">
        UPDATE department SET name = #{name} WHERE id = #{id};
    </update>

    <delete id="delete" parameterType="int">
        DELETE FROM department WHERE id = #{id};
    </delete>

    <select id="selectById" parameterType="int" resultMap="result">
        SELECT * FROM department WHERE id = #{id};
    </select>

    <select id="selectByName" parameterType="String" resultMap="result">
        SELECT * FROM department WHERE name = #{name};
    </select>

    <select id="selectByIdParentDepartment" parameterType="int" resultMap="result">
        SELECT * FROM department WHERE idparentdepartment = #{id}
    </select>

    <select id="selectByIdParentAllDepartment" parameterType="int" resultMap="result">
      WITH recursive departments AS (
        SELECT id, idparentdepartment, name, datecreation from department where idparentdepartment = #{id}

      union

        select department.id, department.idparentdepartment,
            department.name, department.datecreation from department
          join departments on department.idparentdepartment = departments.id
      )
      select * from departments;
    </select>
    
    <select id="selectByIdAboveStandingDepartment" parameterType="int" resultMap="result">
      with recursive departments AS (
        select id, idparentdepartment, name, datecreation from department where id = #{id}

      union

        select department.id, department.idparentdepartment,
            department.name, department.datecreation from department
          join departments on department.id = departments.idparentdepartment
      )

      select * from departments where id!=#{id};
    </select>

    <update id="updateIdParentDepartment" parameterType="Department">
        UPDATE department SET idparentdepartment = #{idParentDepartment} WHERE id = #{id};
    </update>

    <select id="sumSalaryEmployeesByDepartment" parameterType="int" resultType="float">
        Select sum(salary) from employee where iddepartment = #{id} and layoff is NULL;
    </select>
</mapper>